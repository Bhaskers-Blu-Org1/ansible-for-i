# test code for the ibmi_copy module and action plugin
# (c) 2020, Li Jun Zhu <zhuljbj@126.com>
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )

## S0240V01.BIN - MF66738 (immed ptf) and its dependent ptf (MF66667, MF66739 are delayed PTF)
## S1422V01.BIN - 5770SS1 SI70892 5770SS1 SI71023 5733OMF SI70133 5770999 MF66177 5770ST1 SI70943 and their dependent PTFs.

- block:
  # - name: setup remote temporary dir
  #   import_role:
  #     name: ../../setup_remote_tmp_dir
    - set_fact:
        single_delay_ptf_number: "{{(delay_ptf | dict2items)[0]['key']}}"
        single_delay_ptf_product: "{{(delay_ptf | dict2items)[0]['value']}}"

    - include: query_remove_ptf.yml
      with_dict: '{{delay_ptf}}'

    - name: query delay ptf with only requried options
      ibmi_fix: 
        fix_list: '{{ delay_ptf.keys() }}'
        operation: 'query'
      register: fix_result
      failed_when: 'fix_result.ptf_list | length != 0'
     
    # github issue is reported
    # - name: install fixes
    #   ibmi_fix:
    #     product_id: "{{ single_delay_ptf_product}}"
    #     save_file_object: "Q{{ single_delay_ptf_number}}.FILE"
    #     save_file_lib: 'ARCHLIB'
    #     operation: 'load_only'
    #   register: fix_result

    - name: install fixes
      ibmi_fix:
        product_id: "{{ single_delay_ptf_product}}"
        save_file_object: "Q{{ single_delay_ptf_number}}"
        save_file_lib: 'ARCHLIB'
        operation: 'load_only'
      register: fix_result

    - assert:
        that:
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined

    - name: query immed ptf with only requried options
      ibmi_fix: 
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'query'
      register: fix_result 

    - assert:
        that:
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1

    # github issue is reported
    # - name: allow apply without identifying fix
    #   ibmi_fix:
    #     product_id: "{{ single_delay_ptf_product }}"
    #     #save_file_object: 'Q{{ item.key }}' 
    #     #save_file_lib: 'ARCHLIB'
    #     fix_list: "{{ single_delay_ptf_number }}"
    #     operation: 'apply_only'
    #   #with_dict: '{{ delay_ptf }}'

    - name: allow apply without identifying fix
      ibmi_fix:
        product_id: "{{ single_delay_ptf_product }}"
        save_file_object: 'Q{{ single_delay_ptf_number }}' 
        save_file_lib: 'ARCHLIB'
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'apply_only'
      register: fix_result
      failed_when: "'CPF35C' not in fix_result.stderr"

    - assert:
        that:
          - fix_result.ptf_list[0]['PTF_PRODUCT_ID'] is not defined
          - fix_result.start is not defined
          - fix_result.end is not defined
          - fix_result.delta is not defined
          - fix_result.stdout is defined
          - fix_result.stderr is defined
          - fix_result.rc != 0
          - fix_result.stdout_lines is defined
          - fix_result.stderr_lines is defined
          #- fix_result.ptf_list | length == 1

    - name: query immed ptf with only requried options
      ibmi_fix: 
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'query'
      register: fix_result 

    - assert:
        that:
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1

    - name: allow apply without identifying fix
      ibmi_fix:
        product_id: "{{ single_delay_ptf_product }}"
        #save_file_object: 'Q{{ single_delay_ptf_number }}' 
        #save_file_lib: 'ARCHLIB'
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'apply_only'
        delayed_option: "yes"
      register: fix_result

    - assert:
        that:
          - fix_result.ptf_list[0]['PTF_PRODUCT_ID'] is defined
          - fix_result.ptf_list[0]['PTF_IDENTIFIER'] is defined
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.ptf_list[0]['PTF_SAVE_FILE'] is defined
          - fix_result.ptf_list[0]['PTF_IPL_ACTION'] == 'TEMPORARILY APPLIED'
          - fix_result.ptf_list[0]['PTF_ACTION_REQUIRED'] is defined
          - fix_result.ptf_list[0]['PTF_STATUS_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_CREATION_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_ACTION_PENDING'] == 'YES'
          - fix_result.ptf_list[0]['PTF_IPL_REQUIRED'] == 'DELAYED'
          - fix_result.ptf_list[0]['PTF_SUPERSEDED_BY_PTF'] is defined
          - fix_result.ptf_list[0]['PTF_TEMPORARY_APPLY_TIMESTAMP'] is defined
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1

    - name: query immed ptf with only requried options
      ibmi_fix: 
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'query'
      register: fix_result 

    - assert:
        that:
          - fix_result.ptf_list[0]['PTF_PRODUCT_ID'] is defined
          - fix_result.ptf_list[0]['PTF_IDENTIFIER'] is defined
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.ptf_list[0]['PTF_SAVE_FILE'] is defined
          - fix_result.ptf_list[0]['PTF_IPL_ACTION'] == 'TEMPORARILY APPLIED'
          - fix_result.ptf_list[0]['PTF_ACTION_REQUIRED'] is defined
          - fix_result.ptf_list[0]['PTF_STATUS_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_CREATION_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_ACTION_PENDING'] == 'YES'
          - fix_result.ptf_list[0]['PTF_IPL_REQUIRED'] == 'DELAYED'
          - fix_result.ptf_list[0]['PTF_SUPERSEDED_BY_PTF'] is defined
          - fix_result.ptf_list[0]['PTF_TEMPORARY_APPLY_TIMESTAMP'] is defined
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1

    - name: IPL the system to verify the PTF are applied.
      ibmi_reboot:
        how_to_end: '*IMMED'
      when: "fix_result.ptf_list[0]['PTF_IPL_ACTION'] == 'TEMPORARILY APPLIED'"

    - name: remove the ptfs temp if they have been installed
      ibmi_fix:
        fix_list: '{{ single_delay_ptf_number }}'
        product_id: "{{ single_delay_ptf_product }}"
        operation: 'remove'
      register: fix_result
      failed_when: fix_result.rc == 0
      #failed_when: "'CPF35C' not in fix_result.stderr"

    - name: remove the ptfs temp failed because delayed ptf can't be removed temp
      ibmi_fix:
        fix_list: '{{ single_delay_ptf_number }}'
        product_id: "{{ single_delay_ptf_product }}"
        operation: 'remove'
        delayed_option: "yes" 
      register: fix_result
      failed_when: fix_result.rc == 0

    - name: remove the ptfs perm
      ibmi_fix:
        fix_list: '{{ single_delay_ptf_number }}'
        product_id: "{{ single_delay_ptf_product }}"
        operation: 'remove'
        delayed_option: "yes" 
        temp_or_perm: "*PERM"
      register: fix_result

    - name: query immed ptf with only requried options
      ibmi_fix: 
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'query'
      register: fix_result 

    - assert:
        that:
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 0 or (fix_result.ptf_list | length == 1 and (fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'NOT LOADED' or fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'PERMANENTLY REMOVED')) 

    - name: install fixes failed because missing delayed_option=true
      ibmi_fix:
        product_id: '{{single_delay_ptf_product}}' 
        save_file_object: 'Q{{ single_delay_ptf_number }}'
        save_file_lib: 'ARCHLIB'
        operation: 'load_and_apply'
      register: fix_result
      failed_when: fix_result.rc == 0 

    - name: install fixes failed because missing delayed_option=true
      ibmi_fix:
        product_id: '{{single_delay_ptf_product}}' 
        save_file_object: 'Q{{ single_delay_ptf_number }}'
        save_file_lib: 'ARCHLIB'
        operation: 'load_and_apply'
        delayed_option: "yes" 
      register: fix_result

    - assert:
        that:
          - "fix_result.ptf_list[0]['PTF_PRODUCT_ID'] == '{{ single_delay_ptf_product }}'"
          - "fix_result.ptf_list[0]['PTF_IDENTIFIER'] == '{{ single_delay_ptf_number }}'"
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.ptf_list[0]['PTF_SAVE_FILE'] is defined
          - fix_result.ptf_list[0]['PTF_IPL_ACTION'] == 'TEMPORARILY APPLIED'
          - fix_result.ptf_list[0]['PTF_ACTION_REQUIRED'] is defined
          - fix_result.ptf_list[0]['PTF_STATUS_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_CREATION_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_ACTION_PENDING'] == 'YES'
          - fix_result.ptf_list[0]['PTF_IPL_REQUIRED'] == 'DELAYED'
          - fix_result.ptf_list[0]['PTF_SUPERSEDED_BY_PTF'] is defined
          - fix_result.ptf_list[0]['PTF_TEMPORARY_APPLY_TIMESTAMP'] is defined
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1
          
    - name: query immed ptf with only requried options
      ibmi_fix: 
        fix_list: "{{ single_delay_ptf_number }}"
        operation: 'query'
      register: fix_result 

    - assert:
        that:
          - "fix_result.ptf_list[0]['PTF_PRODUCT_ID'] == '{{ single_delay_ptf_product }}'"
          - "fix_result.ptf_list[0]['PTF_IDENTIFIER'] == '{{ single_delay_ptf_number }}'"
          - fix_result.ptf_list[0]['PTF_LOADED_STATUS'] == 'LOADED'
          - fix_result.ptf_list[0]['PTF_SAVE_FILE'] is defined
          - fix_result.ptf_list[0]['PTF_IPL_ACTION'] == 'TEMPORARILY APPLIED'
          - fix_result.ptf_list[0]['PTF_ACTION_REQUIRED'] is defined
          - fix_result.ptf_list[0]['PTF_STATUS_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_CREATION_TIMESTAMP'] is defined
          - fix_result.ptf_list[0]['PTF_ACTION_PENDING'] == 'YES'
          - fix_result.ptf_list[0]['PTF_IPL_REQUIRED'] == 'DELAYED'
          - fix_result.ptf_list[0]['PTF_SUPERSEDED_BY_PTF'] is defined
          - fix_result.ptf_list[0]['PTF_TEMPORARY_APPLY_TIMESTAMP'] is defined
          - fix_result.start is defined
          - fix_result.end is defined
          - fix_result.delta is defined
          - fix_result.stdout is not defined
          - fix_result.stderr is not defined
          - fix_result.rc == 0
          - fix_result.stdout_lines is not defined
          - fix_result.stderr_lines is not defined
          - fix_result.ptf_list | length == 1

    - name: remove the ptfs perm if they have been installed
      ibmi_fix:
        fix_list: '{{ single_delay_ptf_number }}'
        product_id: "{{ single_delay_ptf_product }}"
        operation: 'remove'
        temp_or_perm: "*PERM"
        delayed_option: "yes" 