#Test missing required options 
- name: Miss dest
  ibmi_fetch:
    lib_name: 'SAVRST'
  register: fetch_result
  #failed_when: "'missing required arguments: dest' not in fetch_result.msg"
  failed_when: "'lib_name and dest are required' not in fetch_result.msg"

# Test missing required options 
- name: Miss lib_name
  ibmi_fetch:
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  #failed_when: "'missing required arguments: lib_name' not in fetch_result.msg"
  failed_when: "'lib_name and dest are required' not in fetch_result.msg"

# Test with an invalid option
- name: Fetch objects with an invalid option
  ibmi_fetch:
    lib_name: 'SAVRST'
    dest: '{{ output_dir }}/fetched'
    abc: 'abc'
  register: fetch_result
  failed_when: "'Unsupported parameters' not in fetch_result.msg"

# Test with an invalid object_names
- name: Fetch objects with invalid object_names
  ibmi_fetch:
    object_names: 'ABC'
    lib_name: 'SAVRST'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  #failed_when: "'ABC not found' not in fetch_result.stderr"

# Test positive cases of fail_on_missing
- name: Fetch objects with fail_on_missing
  ibmi_fetch:
    object_names: 'ABC'
    lib_name: 'SAVRST'
    object_types: '*PGM'
    savefile_name: 'ifetch2'
    is_lib: false
    dest: '{{ output_dir }}/fetched'
    force_save: false
    backup: false
    format: '*SAVF'
    target_release: '*CURRENT'
    fail_on_missing: false
    validate_checksum: true
    flat: false

- name: Fetch objects with duplicated object names
  ibmi_fetch:
    object_names: 'PGM1 PGM1'
    lib_name: 'SAVRST'
    object_types: '*PGM'
    savefile_name: 'ifetch1'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result

- include: copy_object.yml
  vars:
    savefile_name: "ifetch1.file" 

- include: cleanup_lib.yml
  vars:
    savefile_name: "ifetch1" 

- name: assert 2 objects restored to the library
  ibmi_sql_query:
    sql: "SELECT OBJNAME, OBJTYPE FROM TABLE (QSYS2.OBJECT_STATISTICS('SAVRST', '*ALL') );"
    expected_row_count: 1

- include: setup_lib.yml

# Test object_type doesn't match
- name: Fetch objects with object_type doesn't match
  ibmi_fetch:
    object_names: 'PGM1'
    lib_name: 'SAVRST'
    object_types: '*JRNRCV'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'No objects saved or restored for library SAVRST' not in ''.join(fetch_result.stderr)"

# Test with not existing lib_name
- name: Fetch objects with not existing lib_nam
  ibmi_fetch:
    lib_name: 'ABC'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'ABC not found' not in ''.join(fetch_result.stderr)"

# Test with invalid object_types
- name: Fetch objects with invalid object_types
  ibmi_fetch:
    lib_name: 'SAVRST'
    object_types: 'ABC'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'CPD0084' not in ''.join(fetch_result.stderr)"

# Test with invalid savefile_name
- name: Fetch objects with invalid savefile_name
  ibmi_fetch:
    lib_name: 'SAVRST'
    savefile_name: 'abc*123'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'CPD0012' not in ''.join(fetch_result.stderr)"

# Test with savefile_name more than 10 characters
- name: Fetch objects with savefile_name more than 10 characters
  ibmi_fetch:
    lib_name: 'SAVRST'
    savefile_name: 'abc123456789'
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'CPD0074' not in ''.join(fetch_result.stderr)"

# Test with invalid is_lib
- name: Fetch objects with invalid is_lib 
  ibmi_fetch:
    lib_name: 'SAVRST'
    is_lib: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid backup
- name: Fetch objects with invalid backup
  ibmi_fetch:
    lib_name: 'SAVRST'
    backup: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid force_save
- name: Fetch objects with invalid force_save
  ibmi_fetch:
    lib_name: 'SAVRST'
    force_save: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid fail_on_missing
- name: Fetch objects with invalid fail_on_missing
  ibmi_fetch:
    lib_name: 'SAVRST'
    fail_on_missing: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid flat
- name: Fetch objects with invalid flat
  ibmi_fetch:
    lib_name: 'SAVRST'
    flat: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid validate_checksum
- name: Fetch objects with invalid validate_checksum
  ibmi_fetch:
    lib_name: 'SAVRST'
    validate_checksum: abc
    dest: '{{ output_dir }}/fetched'
  register: fetch_result
  failed_when: "'is not a valid boolean' not in fetch_result.msg"

# Test with invalid format
- name: Fetch objects with invalid format 
  ibmi_fetch:
    lib_name: 'SAVRST'
    dest: '{{ output_dir }}/fetched'
    format: 'abc'
  register: fetch_result
  failed_when: "'format can only be *SAVF' not in fetch_result.msg"

# Test not existing dest
- name: Fetch objects with not existing dest 
  ibmi_fetch:
    lib_name: 'SAVRST'
    dest: '{{ output_dir }}/abcdefg'

# Test negative cases of target_release
- name: Fetch objects with invalid target_release
  ibmi_fetch:
    lib_name: 'SAVRST'
    object_types: '*PGM'
    dest: '{{ output_dir }}/fetched'
    target_release: 'V7R2M0'
  register: fetch_result
  failed_when: "'CPF3770' not in ''.join(fetch_result.stderr)"
  
- name: dest is an existing directory name without trailing slash and flat=yes
  ibmi_fetch:
    lib_name: 'SAVRST'
    dest: '{{ output_dir }}/fetched'
    flat: yes

