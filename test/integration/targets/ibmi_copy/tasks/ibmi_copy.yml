# test code for the ibmi_copy module and action plugin
# (c) 2020, Li Jun Zhu <zhuljbj@126.com>
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )
#
- name: copy a SAVF to remote i with all options
  ibmi_copy: 
    src: '{{ local_temp_dir }}/{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: true
    backup: false
  register: copy_result

- name: assert the returned parameters
  assert:
    that:
      - "copy_result.dest == '/QSYS.LIB/{{remote_temp_lib}}.LIB/{{ savf_name}}'"
      - "copy_result.src == '{{ local_temp_dir }}/{{ savf_name }}'"
      - copy_result.msg is defined
      - copy_result.stderr is defined
      - copy_result.stdout is defined
      - copy_result.delta is defined

- name: confirm the object can be used
  ibmi_object_restore:
    object_lib: '{{ remote_restored_lib }}'
    savefile_name: "{{ savf_name.split('.')[0] }}"
    savefile_lib: '{{remote_temp_lib}}'

- name: confirm the object does exist on the remote lib
  ibmi_sql_query:
    sql: "SELECT OBJNAME, OBJTYPE FROM TABLE (QSYS2.OBJECT_STATISTICS('{{ remote_restored_lib }}', '*FILE' ) );"
    expected_row_count: 6

- name: cleanup existing objects
  ibmi_cl_command:
    cmd: 'DLTOBJ OBJ({{remote_temp_lib}}/{{ savf_name.split('.')[0] }}) OBJTYPE(*FILE)' 

- name: copy a SAVF with only required options and relative src path
  ibmi_copy: 
    src: '../files/{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'

- name: assert the returned parameters
  assert:
    that:
      - "copy_result.dest == '/QSYS.LIB/{{remote_temp_lib}}.LIB/{{ savf_name}}'"
      - "copy_result.src == '{{ path }}/{{ savf_name }}'"
      - copy_result.msg is defined
      - copy_result.stderr is defined
      - copy_result.stdout is defined
      - copy_result.delta is defined

- name: get the restored object info
  ibmi_object_find:
    object_name: "{{ savf_name.split('.')[0] }}"
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
  register: original_result
  failed_when: 'original_result.object_list | length != 1'

- name: copy a SAVF with force=true when the object does exist
  ibmi_copy: 
    src: '../files/{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: true
    backup: false

- name: get the restored object info
  ibmi_object_find:
    object_name: "{{ savf_name.split('.')[0] }}"
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
  register: forcesave_result

- name: assert the object changed
  assert:
    that:
      - forcesave_result.object_list[0]['OBJCREATED'] != original_result.object_list[0]['OBJCREATED']  

- name: copy a SAVF with force=true backup=true
  ibmi_copy: 
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: true
    backup: true

- name: get the copy object info
  ibmi_object_find:
    object_name: "{{ savf_name.split('.')[0] }}"
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
  register: after_copy_result

- name: get the backup object info
  ibmi_object_find:
    object_name: "{{ savf_name.split('.')[0] }}1"
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
  register: backup_result

- name: assert the object is backed up
  assert:
    that:
      - forcesave_result.object_list[0]['OBJSIZE'] == backup_result.object_list[0]['OBJSIZE']
      - forcesave_result.object_list[0]['OBJCREATED'] == backup_result.object_list[0]['OBJCREATED'] 
      - after_copy_result.object_list[0]['OBJCREATED'] != backup_result.object_list[0]['OBJCREATED'] 

- name: cleanup existing objects
  ibmi_cl_command:
    cmd: 'DLTOBJ OBJ({{remote_temp_lib}}/{{ savf_name.split('.')[0] }}1) OBJTYPE(*FILE)'

- name: cleanup existing objects
  ibmi_cl_command:
    cmd: 'DLTOBJ OBJ({{remote_temp_lib}}/{{ savf_name.split('.')[0] }}) OBJTYPE(*FILE)' 

- name: copy a SAVF with force=false backup=true
  ibmi_copy: 
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: false
    backup: true
  
- name: confirm the object does exist on the remote lib
  ibmi_sql_query:
    sql: "SELECT OBJNAME, OBJTYPE FROM TABLE (QSYS2.OBJECT_STATISTICS('{{ remote_temp_lib }}', '*FILE', 'savf_name.split('.')[0].upper()' ) );"
    expected_row_count: 1

- name: get the backup object info
  ibmi_object_find:
    object_name: "{{ savf_name.split('.')[0] }}1"
    object_type_list: "*FILE"
    lib_name: "{{remote_temp_lib}}"
  register: backup_result
  failed_when: 'backup_result.object_list | length != 0'

- name: copy a SAVF with force=false backup=true when the object exists
  ibmi_copy: 
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: false
    backup: true
  # failed_when

- name: copy a SAVF whose name is same as one existing object but not *FILE in the library
  ibmi_copy: 
    src: '{{ try_backup_savf_name }}'
    lib_name: '{{remote_temp_lib}}'

- name: confirm the two objects with same name in the library
  ibmi_sql_query:
    sql: "SELECT OBJNAME, OBJTYPE FROM TABLE (QSYS2.OBJECT_STATISTICS('{{ remote_temp_lib }}', '*ALL', '{{ try_backup_savf_name.split('.')[0] }}' ) );"
    expected_row_count: 2

- name: copy a SAVF again
  ibmi_copy: 
    src: '{{ try_backup_savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: true
    backup: true
  register: copy_result  
  #failed_when: an error here should be reported that the backup can't be done because the possible names of backup file are occupied.

- name: copy a SAVF with only required options
  ibmi_copy: 
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
  register: neg_result 

- name: copy a SAVF with only required options
  ibmi_copy: 
    src: '{{ savf_name }}'
  register: neg_result 
  failed_when: "'missing required arguments: lib_name' not in neg_result.msg"

- name: copy a SAVF with only required options
  ibmi_copy: 
    lib_name: '{{remote_temp_lib}}'
  register: neg_result 
  failed_when: "'missing required arguments: src' not in neg_result.msg"

- name: Copy with an invalid option
  ibmi_copy:
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    abc: abc
  register: neg_result
  failed_when: "'Unsupported parameters' not in neg_result.msg"

- name: Copy objects with invalid force 
  ibmi_copy:
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: abc
    backup: true
  register: neg_result
  failed_when: "'is not a valid boolean' not in neg_result.msg"

- name: Copy objects with invalid backup 
  ibmi_copy:
    src: '{{ savf_name }}'
    lib_name: '{{remote_temp_lib}}'
    force: true
    backup: abc
  register: neg_result
  failed_when: "'is not a valid boolean' not in neg_result.msg"

- name: Copy objects with a txt file
  ibmi_copy:
    src: '{{ local_temp_dir }}/{{ txt_name }}'
    lib_name: '{{remote_temp_lib}}'
  register: neg_result
  #failed_when: 'txt file can not in lib'

- name: Copy objects with not existing FILE
  ibmi_copy:
    src: '{{ local_temp_dir }}/abc.FILE'
    lib_name: '{{remote_temp_lib}}'
  register: neg_result
  failed_when: "'abc.FILE not found' not in neg_result.msg"

- name: Copy objects with a not existing lib
  ibmi_copy:
    src: '{{ local_temp_dir }}/{{ savf_name }}'
    lib_name: 'ABC'
  register: neg_result
  #failed_when: "'ABC not found' not in neg_result.msg"