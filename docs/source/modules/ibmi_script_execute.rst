..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM/ansible-for-i/tree/ansible_collection_beta/plugins/modules/ibmi_script_execute.py

.. _ibmi_script_execute_module:

ibmi_script_execute -- Execute a cl/sql script file on a remote ibm i node.
===========================================================================


.. contents::
   :local:
   :depth: 1


Synopsis
--------
- The ibmi_script_execute module execute a cl/sql script file on a remote ibm i node.
- Only support cl/sql script file by now.
- For sql script, use RUNSQLSTM to process
- For non-cl/sql script, use the script plugin instead.



Parameters
----------


     
asp_group
  Specifies the name of the auxiliary storage pool (ASP) group to set for the current thread.

  The ASP group name is the name of the primary ASP device within the ASP group.


  | **required**: false
  | **type**: str
  | **default**: *SYSBAS


     
parameters
  The parameters that RUNSQLSTM command will take. All other parameters need to be specified here.

  The default values of parameters for RUNSQLSTM will be taken if not specified.

  Only works for sql script


  | **required**: false
  | **type**: str
  | **default**:  


     
severity_level
  When run sql script, specifies whether the processing is successful, based on the severity of the messages generated by the processing of the SQL statements.

  If errors that are greater than the value specified for this parameter occur during processing, no more statements are run and the statements are rolled back if they are running under commitmentcontrol.

  Only works for sql script


  | **required**: false
  | **type**: int
  | **default**: 10


     
src
  Script file path on the remote ibm i node.

  The path can be absolute or relative.


  | **required**: True
  | **type**: path


     
type
  Specify the script file type.

  Only support CL or SQL script by now.


  | **required**: True
  | **type**: str
  | **choices**: CL, SQL



Examples
--------

.. code-block:: yaml+jinja

   
   - name: Execute test.cl on a remote ibm i node
     ibmi_script_execute:
       src: '/home/test.cl'
       type: 'CL'

   - name: Execute testsql.sql on a remote ibm i node
     ibmi_script_execute:
       src: '/home/testsql.sql'
       type: 'SQL'
       severity_level: 40
       parameters: 'DATFMT(*USA)'



Notes
-----

.. note::
   Ansible hosts file need to specify ansible_python_interpreter=/QOpenSys/pkgs/bin/python3(or python2)

   For cl script, the command supports line breaks. When a command ends, add ':' at the end of each command or empty the next line. Otherwise program will not consider it is the end of a command.




Return Values
-------------


   
                              
       stderr_lines
        | The standard error split in lines
      
        | **returned**: always
        | **type**: list      
        | **sample**:

              .. code-block::

                       ["Execute command %s failed."]
            
      
      
                              
       job_log
        | the job_log
      
        | **returned**: always
        | **type**: str
        | **sample**: [{'TO_MODULE': 'PLUGILE', 'TO_PROGRAM': 'XMLSTOREDP', 'MESSAGE_TEXT': 'Command ended normally with exit status 0.', 'FROM_MODULE': 'QZSHRUNC', 'FROM_PROGRAM': 'QZSHRUNC', 'MESSAGE_TIMESTAMP': '2020-05-27-16.17.43.738571', 'FROM_USER': 'TESTER', 'TO_INSTRUCTION': '5829', 'MESSAGE_SECOND_LEVEL_TEXT': '', 'MESSAGE_TYPE': 'COMPLETION', 'MESSAGE_ID': 'QSH0005', 'MESSAGE_LIBRARY': 'QSHELL', 'FROM_LIBRARY': 'QSHELL', 'SEVERITY': '0', 'FROM_PROCEDURE': 'main', 'TO_LIBRARY': 'QXMLSERV', 'FROM_INSTRUCTION': '149', 'MESSAGE_SUBTYPE': '', 'ORDINAL_POSITION': '13', 'MESSAGE_FILE': 'QZSHMSGF', 'TO_PROCEDURE': 'ILECMDEXC'}]

            
      
      
                              
       stderr
        | The standard error
      
        | **returned**: always
        | **type**: str
        | **sample**: Execute command %s failed.

            
      
      
                              
       stdout
        | The standard output
      
        | **returned**: always
        | **type**: str
        | **sample**: Successfully execute script file /home/test.cl

            
      
      
                              
       stdout_lines
        | The standard output split in lines
      
        | **returned**: always
        | **type**: list      
        | **sample**:

              .. code-block::

                       ["Successfully execute script file /home/test.cl"]
            
      
      
                              
       delta
        | The execution delta time.
      
        | **returned**: always
        | **type**: str
        | **sample**: 0:00:00.307534

            
      
      
                              
       rc
        | The action return code (0 means success, non-zero means failure)
      
        | **returned**: always
        | **type**: int
        | **sample**: 255

            
      
        
